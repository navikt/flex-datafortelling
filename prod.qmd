---
title: "Team flex OKR T1 2024"
format:
    html:
        self-contained: true
---

## KR1: Andelen som ikke finner det de leter etter på ditt sykefravær halveres


```{python}
from datetime import datetime, timedelta

print(f"Denne datafortellingen er sist oppdatert {datetime.now()}")

import pandas as pd

import os
from google.cloud import bigquery
credentials_path = os.path.expanduser('~/.config/gcloud/application_default_credentials.json')

authenticated_locally = os.path.isfile(credentials_path)
running_in_prod = os.getenv('NAIS_CLUSTER_NAME', '').lower() == 'prod-gcp'



if authenticated_locally or running_in_prod:  # Check if the file exists
    if authenticated_locally:
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path

    bigquery_client = bigquery.Client(project='flex-prod-af40')

    query = """

    SELECT
      DATE_TRUNC(
        DATE(`flex-prod-af40.flex_dataset.flexjar_feedback_view`.`opprettet`),
        WEEK(MONDAY)
      ) AS `uke_start`,
      SUM(CASE WHEN `svar` = 'JA' THEN 1 ELSE 0 END) AS `antall_ja`,
      SUM(CASE WHEN `svar` = 'NEI' THEN 1 ELSE 0 END) AS `antall_nei`,
      SUM(CASE WHEN `svar` = 'FORBEDRING' THEN 1 ELSE 0 END) AS `antall_forbedring`
    FROM
      `flex-prod-af40.flex_dataset.flexjar_feedback_view`
    WHERE
      `flex-prod-af40.flex_dataset.flexjar_feedback_view`.`feedbackId` = 'ditt-sykefravaer-fant-du'
    GROUP BY
      `uke_start`
    ORDER BY
      `uke_start` DESC

    """

    # Anta at df er opprettet som følger:
    df = bigquery_client.query(query).to_dataframe()

    # Sørg for at 'uke_start' er i datetime format
    df['uke_start'] = pd.to_datetime(df['uke_start'])

    # Definer periodene
    periode1_start = pd.to_datetime('2024-02-04')
    periode1_slutt = pd.to_datetime('2024-02-23')
    periode2_start = df['uke_start'].max() - pd.Timedelta(weeks=2)  # Siste to ukene

    # Beregn andeler for periodene
    def beregn_andeler(subset):
        subset = subset.copy()  # Lag en kopi for å unngå endring på en slice
        subset['totalt'] = subset['antall_nei'] + subset['antall_forbedring'] + subset['antall_ja']
        subset['andel_nei_forbedring'] = (subset['antall_nei'] + subset['antall_forbedring']) / subset['totalt']
        return subset

    # Filtre datasettet for de to periodene og beregn andeler
    periode1_df = df[(df['uke_start'] >= periode1_start) & (df['uke_start'] <= periode1_slutt)]
    periode2_df = df[df['uke_start'] >= periode2_start]

    periode1_df = beregn_andeler(periode1_df)
    periode2_df = beregn_andeler(periode2_df)

    # Beregn gjennomsnittlig andel for hver periode
    andel_periode1 = periode1_df['andel_nei_forbedring'].mean()
    andel_periode2 = periode2_df['andel_nei_forbedring'].mean()

    # Beregn hvor langt unna halvering dere er
    mål_halvering = andel_periode1 / 2

    # Vis resultatene
    print(f"Andelen som svarte 'nei' eller 'forbedring' fra 2024-02-05 til 2024-02-23: {andel_periode1:.2%}")
    print(f"Andelen som svarte 'nei' eller 'forbedring' de siste to ukene: {andel_periode2:.2%}")
    print(f"Målet om halvering er: {mål_halvering:.2%}")



else:

    print("Credentials file not found OR not running in prod. Functionality requiring credentials/prod env will be skipped.")

```