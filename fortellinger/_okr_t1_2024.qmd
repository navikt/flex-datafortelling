```{python}
import matplotlib.pyplot as plt
import pandas as pd
from datetime import datetime

from oppsett.bigquery import init_bigquery_client
from queries.flexjar_svar_per_dag import flexjar_svar_per_dag_query

bq_client = init_bigquery_client()
query = flexjar_svar_per_dag_query()

# Anta at df er opprettet som følger:
df = bq_client.query(query).to_dataframe()

# Sørg for at 'dag' er i datetime format
df['dag'] = pd.to_datetime(df['dag'])

baseline_start = '2024-02-04'
baseline_end = '2024-02-23'
# Definer periodene
periode1_start = pd.to_datetime(baseline_start)
periode1_slutt = pd.to_datetime(baseline_end)
periode2_start = datetime.now() - pd.Timedelta(weeks=2)  # Siste to ukene


# Beregn andeler for periodene
def beregn_andeler(subset):
    subset = subset.copy()  # Lag en kopi for å unngå endring på en slice
    subset['totalt'] = subset['antall_nei'] + subset['antall_forbedring'] + subset['antall_ja']
    subset['andel_nei_forbedring'] = (subset['antall_nei'] + subset['antall_forbedring']) / subset['totalt']
    return subset


# Filtre datasettet for de to periodene og beregn andeler
periode1_df = df[(df['dag'] >= periode1_start) & (df['dag'] <= periode1_slutt)]
periode2_df = df[df['dag'] >= periode2_start]

periode1_df = beregn_andeler(periode1_df)
periode2_df = beregn_andeler(periode2_df)

# Beregn gjennomsnittlig andel for hver periode
andel_periode1 = periode1_df['andel_nei_forbedring'].mean()
andel_periode2 = periode2_df['andel_nei_forbedring'].mean()

# Beregn hvor langt unna halvering dere er
mål_halvering = andel_periode1 / 2

# Vis resultatene
print(f"Nullpunktmålingen går fra {baseline_start} til {baseline_end}.")
print("Andelen som ikke finner det de leter etter på ditt sykefravær måles ved andelen \nflexjar feedbacks på ditt sykefravær hvor brukeren har svart at de ikke fant det \nde lurte på eller har foreslått en forbedring.")
print(f"\nAndelen som ikke fant det de lette etter i nullpunktsmålingen er {andel_periode1:.1%}")
print(f"Vårt mål er da {mål_halvering:.1%}")
print(f"\nAndelen som ikke fant det de lette etter de siste to ukene er {andel_periode2:.1%}")

# Reset av df før vi tegner graf
df = bq_client.query(query).to_dataframe()

df['dag'] = pd.to_datetime(df['dag'])

cutoff_date = pd.to_datetime(baseline_start)
today = pd.to_datetime(datetime.now().date())
df = df[(df['dag'] >= cutoff_date) & (df['dag'] < today)]

df['dag'] = pd.to_datetime(df['dag'])

df['total_votes'] = df[['antall_ja', 'antall_nei', 'antall_forbedring']].sum(axis=1)
df['pct_ja'] = (df['antall_ja'] / df['total_votes']) * 100
df['pct_nei'] = (df['antall_nei'] / df['total_votes']) * 100
df['pct_forbedring'] = (df['antall_forbedring'] / df['total_votes']) * 100

window_size = pd.Timedelta(days=7)
rolling_avg = df.rolling(window=window_size, on='dag').mean()
rolling_avg.head(20)

plt.figure(figsize=(8, 6))
plt.plot(rolling_avg['dag'], rolling_avg['pct_ja'], label='Ja')
plt.plot(rolling_avg['dag'], rolling_avg['pct_nei'], label='Nei')
plt.plot(rolling_avg['dag'], rolling_avg['pct_forbedring'], label='Forbedring')

baseline = (1 - andel_periode1) * 100
goal = (1 - mål_halvering) * 100
plt.axhline(y=baseline, color='gray', linestyle='--', label='Utgangspunkt')
plt.axhline(y=goal, color='gold', linestyle='--', label='Mål')

plt.xlabel('Dato')
plt.ylabel('Prosent (%)')
plt.title('Prosentvis fordeling av stemmer per dag (Rolling Average)')

plt.legend()

plt.xticks(rotation=45)

plt.tight_layout()
plt.show()


```