---
title: "Team flex OKR T1 2024"
format:
    html:
        self-contained: true
---

## KR1: Andelen som ikke finner det de leter etter på ditt sykefravær halveres


```{python}
from datetime import datetime, timedelta

print(f"Denne datafortellingen er sist oppdatert {datetime.now()}\n")

import pandas as pd

import os
from google.cloud import bigquery
credentials_path = os.path.expanduser('~/.config/gcloud/application_default_credentials.json')

authenticated_locally = os.path.isfile(credentials_path)
running_in_prod = os.getenv('NAIS_CLUSTER_NAME', '').lower() == 'prod-gcp'



if authenticated_locally or running_in_prod:  # Check if the file exists
    if authenticated_locally:
        os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = credentials_path

    bigquery_client = bigquery.Client(project='flex-prod-af40')

    query = """

    SELECT
      DATE(`flex-prod-af40.flex_dataset.flexjar_feedback_view`.`opprettet`)
       AS `dag`,
      SUM(CASE WHEN `svar` = 'JA' THEN 1 ELSE 0 END) AS `antall_ja`,
      SUM(CASE WHEN `svar` = 'NEI' THEN 1 ELSE 0 END) AS `antall_nei`,
      SUM(CASE WHEN `svar` = 'FORBEDRING' THEN 1 ELSE 0 END) AS `antall_forbedring`
    FROM
      `flex-prod-af40.flex_dataset.flexjar_feedback_view`
    WHERE
      `flex-prod-af40.flex_dataset.flexjar_feedback_view`.`feedbackId` = 'ditt-sykefravaer-fant-du'
    GROUP BY
      `dag`
    ORDER BY
      `dag` DESC

    """

    # Anta at df er opprettet som følger:
    df = bigquery_client.query(query).to_dataframe()

    # Sørg for at 'dag' er i datetime format
    df['dag'] = pd.to_datetime(df['dag'])

    baseline_start = '2024-02-04'
    baseline_end = '2024-02-23'
    # Definer periodene
    periode1_start = pd.to_datetime(baseline_start)
    periode1_slutt = pd.to_datetime(baseline_end)
    periode2_start = datetime.now() - pd.Timedelta(weeks=2)  # Siste to ukene

    # Beregn andeler for periodene
    def beregn_andeler(subset):
        subset = subset.copy()  # Lag en kopi for å unngå endring på en slice
        subset['totalt'] = subset['antall_nei'] + subset['antall_forbedring'] + subset['antall_ja']
        subset['andel_nei_forbedring'] = (subset['antall_nei'] + subset['antall_forbedring']) / subset['totalt']
        return subset

    # Filtre datasettet for de to periodene og beregn andeler
    periode1_df = df[(df['dag'] >= periode1_start) & (df['dag'] <= periode1_slutt)]
    periode2_df = df[df['dag'] >= periode2_start]

    periode1_df = beregn_andeler(periode1_df)
    periode2_df = beregn_andeler(periode2_df)

    # Beregn gjennomsnittlig andel for hver periode
    andel_periode1 = periode1_df['andel_nei_forbedring'].mean()
    andel_periode2 = periode2_df['andel_nei_forbedring'].mean()

    # Beregn hvor langt unna halvering dere er
    mål_halvering = andel_periode1 / 2

    # Vis resultatene
    print(f"Nullpunktmålingen går fra {baseline_start} til {baseline_end}.")
    print("Andelen som ikke finner det de leter etter på ditt sykefravær måles ved andelen \nflexjar feedbacks på ditt sykefravær hvor brukeren har svart at de ikke fant det \nde lurte på eller har foreslått en forbedring.")
    print(f"\nAndelen som ikke fant det de lette etter i nullpunktsmålingen er {andel_periode1:.1%}")
    print(f"Vårt mål er da {mål_halvering:.1%}")
    print(f"\nAndelen som ikke fant det de lette etter de siste to ukene er {andel_periode2:.1%}")



else:

    print("Credentials file not found OR not running in prod. Functionality requiring credentials/prod env will be skipped.")

```